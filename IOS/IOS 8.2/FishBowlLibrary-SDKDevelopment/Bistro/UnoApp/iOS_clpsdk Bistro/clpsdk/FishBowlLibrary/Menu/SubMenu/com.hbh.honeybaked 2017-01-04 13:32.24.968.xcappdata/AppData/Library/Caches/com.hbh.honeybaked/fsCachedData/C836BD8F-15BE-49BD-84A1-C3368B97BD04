<!-- Startup vars -->
var blnUseGPS = true;

<!-- Startup scripts -->
$( document ).ready(function() {
	// Start the accordion
	$(function() {
	$( "#home-accordion" ).accordion({
			active: false,
			animate: 300, // collapse will take 300ms
			autoHeight: false,
			collapsible: true,	
			heightStyle: "content"
	});
	});	

	// scroll to top once accordian is opened
	$(function() {
		$('#home-accordion h3').bind('click',function(){
			var self = this;
			setTimeout(function() {
			theOffset = $(self).offset();
			$('body,html').animate({ scrollTop: theOffset.top - 10 });
			}, 310); // ensure the collapse animation is done
		});
	});

	
});
<!-- End of startup scripts -->

<!-- Helper Scripts -->
	function addCookie(value) {
		if (value != "") {
			var myDate=new Date();
			myDate.setFullYear(2030,0,1);
			var strCookie="HBLocalStore=" + escape(value) + "; path=/; expires=" + myDate.toUTCString();

			document.cookie = strCookie;
		}
	}

	function getCookie(c_name) {
		var c_value = document.cookie;
		var c_start = c_value.indexOf(c_name + "=");
		if (c_start == -1) {
		  c_value = null;
		}
		else {
		  c_start = c_value.indexOf("=", c_start) + 1;
			var c_end = c_value.indexOf(";", c_start);
			if (c_end == -1) {
			  c_end = c_value.length;
			}
			c_value = unescape(c_value.substring(c_start, c_end));
		}
		alert("value: " + c_value);
	}

  function validateEmail(emailAddress) {
			var email,at,lft,i,a,dot,middle,rght;
			var regExp = /^\s*[a-zA-Z\d][a-zA-Z\d\.!#$%&'*+\-\/=?^_`{|}~]*@([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}\s*$/;

			email = emailAddress.trim();
			at = email.indexOf("@",1) ;
			if(at == -1) {
				return false;
			}
			dot = email.indexOf(".",at) ;
			if (dot == -1) {
				return false;
			}

			middle = email.substring(at+1,dot);
			rght = email.substring(dot +1);
			if ((middle.length <1) || (rght.length < 2)) {
				return false;
			}

			if (emailAddress.length <= 200 && regExp.test(emailAddress)) {
				 return true;
			} else {
				 return false;
			}
   }


    // Geo Location Scripts
	function geoFindMe() {
        var hfAlreadyRun = document.getElementById("MainContent_hfAlreadyRun");
	
      if (!blnUseGPS || hfAlreadyRun.value == "true" ) {
        return;
      }

	  if (!navigator.geolocation){
		alert("Geolocation is not supported by your device.");
		return;
	  }
	
	  function success(position) {
		var latitude  = position.coords.latitude;
		var longitude = position.coords.longitude;
	
        var hfLat = document.getElementById("MainContent_hfLat");
        var hfLong = document.getElementById("MainContent_hfLong");

        hfLat.value = latitude;
        hfLong.value = longitude;

        __doPostBack("MainContent_hlSearch");       
		//alert('Latitude is ' + MainContent_hfLat.value + '° and Longitude is ' + MainContent_hfLong.value + '°');

	  };
	
      function fail() {

      }

		var fallback = setTimeout(function() { fail('10 seconds expired'); }, 10000);
			navigator.geolocation.getCurrentPosition(
				function (pos) {
					clearTimeout(fallback);
					//console.log('pos', pos);
					var point = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
					new google.maps.Geocoder().geocode({'latLng': point}, function (res, status) {
						if(status == google.maps.GeocoderStatus.OK && typeof res[0] !== 'undefined') {
							var zip = res[0].formatted_address.match(/,\s\w{2}\s(\d{5})/);
							if(zip) {
								//alert('Your zip code is ' +  zip[1]);
							} else fail('Failed to parse');
						} else {
							fail('Failed to reverse');
						}
					});
				}, function(err) {
					fail(err.message);
				}
			);
		
	  function error() {
		alert("Unable to retrieve your location.  Make sure your GPS and Location Services is enabled.");
	  };
		
	  navigator.geolocation.getCurrentPosition(success, error);
	}	  


<!-- Date scripts -->
<!-- This script and many more are available free online at -->
<!-- The JavaScript Source!! http://javascript.internet.com -->
<!-- Created by: Lee Hinder, lee.hinder@ntlworld.com -->
<!-- Begin
//set todays date
Now = new Date();
NowDay = Now.getDate();
NowMonth = Now.getMonth();
NowYear = Now.getYear();
if (NowYear < 2000) NowYear += 1900; //for Netscape

//function for returning how many days there are in a month including leap years
function DaysInMonth(WhichMonth, WhichYear)
{
  var DaysInMonth = 31;
  if (WhichMonth == "April" || WhichMonth == "June" || WhichMonth == "September" || WhichMonth == "November") DaysInMonth = 30;
  if (WhichMonth == "February")  DaysInMonth = 29;
  return DaysInMonth;
}

//function to change the available days in a months
function ChangeOptionDays(Which)
{
  DaysObject = eval("document.getElementById('" + Which + "Day')");
  MonthObject = eval("document.getElementById('" + Which + "Month')");
  Year = Now.getYear();

  Month = MonthObject[MonthObject.selectedIndex].text;

  DaysForThisSelection = DaysInMonth(Month, Year);
  CurrentDaysInSelection = DaysObject.length;
  if (CurrentDaysInSelection > DaysForThisSelection)
  {
    for (i=0; i<(CurrentDaysInSelection-DaysForThisSelection); i++)
    {
      DaysObject.options[DaysObject.options.length - 1] = null
    }
  }
  if (DaysForThisSelection > CurrentDaysInSelection)
  {
    for (i=0; i<(DaysForThisSelection-CurrentDaysInSelection); i++)
    {
      NewOption = new Option(DaysObject.options.length + 1);
      DaysObject.add(NewOption);
    }
  }
}

//function to set options to today
function SetToToday(Which)
{
  DaysObject = eval("document.getElementById('" + Which + "Day'");
  MonthObject = eval("document.getElementById('" + Which + "Month'");

  MonthObject[NowMonth].selected = true;

  ChangeOptionDays(Which);

  DaysObject[NowDay-1].selected = true;
}

//function to write option years plus x
function WriteYearOptions(YearsAhead)
{
  line = "";
  for (i=0; i<YearsAhead; i++)
  {
    line += "<OPTION>";
    line += NowYear + i;
  }
  return line;
}
// End of Date Scripts
