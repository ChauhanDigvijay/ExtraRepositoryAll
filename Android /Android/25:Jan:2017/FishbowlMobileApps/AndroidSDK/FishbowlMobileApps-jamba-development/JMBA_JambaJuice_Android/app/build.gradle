buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }


}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'




repositories {
    jcenter()

//    maven { url  "http://dl.bintray.com/urbanairship/android" } //removed urbanairship
    maven { url 'https://oss.sonatype.org/content/groups/public' }
    maven { url 'https://maven.fabric.io/public' }
    flatDir {
        dirs 'libs'
    }

}

def computeVersionCode() {
    def process = "git rev-list HEAD --count".execute()
    def finalString = process.text.toInteger()
    println 'computeVersionCode: ' + finalString;
    return finalString;
}

def getSourceBranch(Boolean prod) {
    def process = "git symbolic-ref --short -q HEAD".execute()
    def branch = process.text.trim();
    if (prod) {
        if (branch != "master") {
            println("WARNING: PRODUCTION BUILD NOT BEING BUILT OFF OF MASTER");
        }
        branch = "";
    }

    println 'getSourceBranch: ' + branch;
    return "\"" + branch + "\"";
}

def setupSigningConfig(String flavor) {
    println 'setupKeystore: Setting up keystore info for flavor: ' + flavor
    def filename = (flavor == "release" ? 'production' : 'development')

    def keystoreFile = 'keystore/' + filename + '.jks'
    android.signingConfigs[flavor].storeFile = file(keystoreFile)

    def propsFile = rootProject.file('app/keystore/' + filename + '.properties')

    def storePassword, keyAlias, keyPassword
    if (propsFile.exists()) {
        println 'setupKeystore: Propsfile = ' + propsFile + ' exists!'
        def props = new Properties()
        props.load(new FileInputStream(propsFile))

        storePassword = props['storePassword']
        keyAlias = props['keyAlias']
        keyPassword = props['keyPassword']
    } else {
        println 'setupKeystore: Using enviornment variables'
        storePassword = System.getenv("KEYSTORE_PASS")
        keyAlias = System.getenv("ALIAS_NAME")
        keyPassword = System.getenv("ALIAS_PASS")
    }
    android.signingConfigs[flavor].storePassword = storePassword
    android.signingConfigs[flavor].keyAlias = keyAlias
    android.signingConfigs[flavor].keyPassword = keyPassword
}

def getVersionNameFromPropsFile(Boolean prod) {
    def versionPropsFile = rootProject.file('app/version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def buildName = versionProps['VERSION_MAJOR'] + '.' + versionProps['VERSION_MINOR'] + '.' + versionProps['VERSION_BUILD'];

//        // Get the branch this build is being done off of.
//        if (!prod) {
//            buildName = buildName + '.' + buildSuffix;
//        }

        println("Build string: " + buildName);
        return buildName;
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
//            entry(key: "apiSecret", value: apiSecret)
        }
    }
}


android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'

    signingConfigs {
        release {
            storeFile file("keystore/production.jks") //temp dev fix
        }
        debug {
//            storeFile file("keystore/development.jks") //temp dev fix
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'com.android.support:design:26.+'
            force 'com.android.support:support-v4:26.+'
            force 'com.android.support:appcompat-v7:26.+'
        }
    }

    defaultConfig {
        applicationId "com.olo.jambajuice"
        minSdkVersion 16
        targetSdkVersion 26
        // Enabling multidex support.
        multiDexEnabled true
        versionCode 1209
    }

    productFlavors {
        staging {
            applicationId = "com.jambajuice.apps.android.jambajuice"
            versionName getVersionNameFromPropsFile(false)
            buildConfigField "String", "BUILD_BRANCH", getSourceBranch(false)
        }
        development {
            applicationId = "com.jambajuice.apps.android.jambajuice"
            versionName getVersionNameFromPropsFile(false)
            buildConfigField "String", "BUILD_BRANCH", getSourceBranch(false)
        }
        production {
            versionName getVersionNameFromPropsFile(true)
            buildConfigField "String", "BUILD_BRANCH", getSourceBranch(true)
        }
    }

    buildTypes {
        debug {
//            setupSigningConfig "debug"
            signingConfig signingConfigs.debug

            // enable crashlytics where you need

        }

        release {
//            setupSigningConfig "release"
            signingConfig signingConfigs.release
            println("buildTypes - RELEASE")
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        ciRelease {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //    compile 'com.android.support:support-v4:23.0.0'
    //    compile 'com.android.support:appcompat-v7:23.0.0'
    //compile 'com.android.support:recyclerview-v7:23.0.0'
    // compile 'com.android.support:design:23.0.0'
    //compile 'com.instabug.library:instabugsupport:1.7.3'
    //compile 'com.github.hathway:OloAndroidSDK:1.0.20-SNAPSHOT'
    compile project(':..:JMBA_Olo_Android_SDK:app')
    compile project(':..:JMBA_SpendGo_Android_SDK:app')
    //compile project(':..:AndroidFishbowlBasicModule')
    compile(name: 'AndroidFishbowlBasicModule-FCM-s2ap-release-2.4.2-v1.2.9', ext: 'aar')
    compile project(':..:JMBA_InComm_Android_SDK:app')
    compile('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    // Use local repos
    //compile project(':..:SpendGo-Android-SDK:app')
    //compile project(':..:Olo-Android-SDK:app')
    // Urban Airship SDK
    //    compile 'com.urbanairship.android:urbanairship-sdk:6.1.3' //removed urbanairship
    // Recommended for in-app messaging
    //    compile 'com.android.support:cardview-v7:23.0.0'//removed urbanairship
    // Required for Android (GCM) push notifications
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    //Required for parse library
    compile files('libs/parse-android-1.14.0.jar')
    //    compile 'com.google.android.gms:play-services-appindexing:11.0.4'

    //support
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support:design:26.+'
    compile 'com.android.support:support-v4:26.+'
    compile 'com.android.support:recyclerview-v7:26.+'
    compile 'com.android.support:cardview-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    //common
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.mcxiaoke.volley:library:1.0.14'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.google.zxing:core:3.2.0'
    compile 'com.journeyapps:zxing-android-embedded:3.0.2@aar'
    compile 'com.loopj.android:android-async-http:1.4.9'


    //Special
    compile 'io.card:android-sdk:5.4.2'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.daimajia.swipelayout:library:1.2.0@aar'
    compile 'org.apache.kafka:kafka-clients:0.10.1.0'
    compile 'com.parse.bolts:bolts-android:1.+'
    compile 'com.android.support:multidex:1.0.1'

    //google
    compile 'com.google.android.gms:play-services-gcm:11.0.4'
    compile 'com.google.android.gms:play-services-maps:11.0.4'
    compile 'com.google.android.gms:play-services-location:11.0.4'
    compile 'com.google.android.gms:play-services-analytics:11.0.4'
    compile 'com.google.maps.android:android-maps-utils:0.4.3'
    compile 'com.google.android.gms:play-services-auth:11.0.4'
    compile 'com.google.firebase:firebase-appindexing:11.0.4'
    compile 'com.google.android.gms:play-services:11.0.4'
    compile 'com.google.firebase:firebase-messaging:11.0.4'


    //Third party
    compile 'net.hockeyapp.android:HockeySDK:3.7.0'

}

apply plugin: 'com.google.gms.google-services'